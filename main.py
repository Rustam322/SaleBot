from aiogram import Dispatcher, Bot, executor
from aiogram.types import Message, CallbackQuery, LabeledPrice
from dotenv import load_dotenv
from keyboards import *
from work import *
import os

load_dotenv()

bot = Bot(token=os.getenv('TOKEN'))
PAYMENT = os.getenv('PAYMENT')

dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    chat_id = message.chat.id
    """–ù–∞–¥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏
    –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = first_select_user(chat_id)
    if user:
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await main_menu(message)
    else:
        text = f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name},
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç PROWEB-–ï–î–ê. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
–û—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üëáüëáüëá'''
        await message.answer(text, reply_markup=generate_phone_number())


@dp.message_handler(content_types=['contact'])
async def register(message: Message):
    chat_id = message.from_user.id
    full_name = message.from_user.full_name
    phone = message.contact.phone_number
    register_user(chat_id, full_name, phone)
    create_cart(chat_id)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await main_menu(message)


async def main_menu(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                         reply_markup=generate_main_menu())


#@dp.message_handler(regexp=r'‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
@dp.message_handler(lambda message: '‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    categories = get_categories()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                         reply_markup=generate_categories(categories))

# category_1

@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products_by_category(call: CallbackQuery):
    _, category_id = call.data.split('_')
    products = get_products_by_category(category_id)
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=generate_products(products))

@dp.callback_query_handler(lambda call: 'product' in call.data)
async def product_detail(call: CallbackQuery):
    _, product_id = call.data.split('_')
    product_id = int(product_id)
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    product = get_product(product_id)
    print(product)
    await bot.delete_message(chat_id, message_id)
    with open(product[5], mode='rb') as img:
        caption = f'''{product[2]}

–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}

–¶–µ–Ω–∞: {product[3]}

–í—ã–±—Ä–∞–Ω–æ: 1 - {product[3]}'''
        await bot.send_photo(chat_id=chat_id,
                             photo=img,
                             caption=caption,
                             reply_markup=generate_detail_product(product[0], product[1]))

@dp.callback_query_handler(lambda call: 'change' in call.data)
async def change_quantity(call: CallbackQuery):
    _, product_id, quantity = call.data.split('_')
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    product = get_product(product_id)
    caption = f'''{product[2]}

–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}

–¶–µ–Ω–∞: {product[3]}

–í—ã–±—Ä–∞–Ω–æ: {quantity} - {product[3] * int(quantity)} —Å—É–º'''
    if int(quantity) >= 1:
        await bot.edit_message_caption(chat_id=chat_id,
                                       message_id=message_id,
                                       caption=caption,
                                       reply_markup=generate_detail_product(product[0], product[1], int(quantity)))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def to_main_menu(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    categories = get_categories()
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=generate_categories(categories))


@dp.callback_query_handler(lambda call: 'back' in call.data)
async def back_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    _, category_id = call.data.split('_')
    products = get_products_by_category(category_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ',
                           reply_markup=generate_products(products))


@dp.callback_query_handler(lambda call: call.data.startswith('cart'))
async def add_product_to_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    # cart_1_2   - cart - product_id = 1 -  quantity = 2
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)

    """–í—ã—Ç–∞—â–∏—Ç—å id –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cart_id = get_cart_id(chat_id)

    """–ü–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ id"""
    product = get_product(product_id)
    product_name, price = product[2], product[3]
    final_price = quantity * price

    if insert_or_update_cart_product(cart_id, product_name, quantity, final_price):
        await bot.answer_callback_query(call.id, text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await bot.answer_callback_query(call.id, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(lambda message: 'üõí –ö–æ—Ä–∑–∏–Ω–∞' in message.text)
async def show_cart(message: Message, edit_message=False):
    chat_id = message.chat.id
    """–ü–æ–ª—É—á–∏—Ç—å id –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_id = get_cart_id(chat_id)
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—â–µ–π —Å—É–º–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    update_total_price_quantity(cart_id)
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –æ–±—â—É—é —Å—É–º–º—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    total_products, total_price = get_total_products_price(cart_id)
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å—Ç—Ä–æ—á–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_products = get_cart_products(cart_id)
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print(total_products, total_price)
    print(cart_products)

    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n\n'
    i = 0
    for product in cart_products:
        i += 1
        text += f'''{i}. {product[2]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[3]}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {product[4]}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: {0 if total_price is None else total_price}'''

    if edit_message: # True
        await bot.edit_message_text(text, chat_id, message.message_id,
                                    reply_markup=generate_cart_buttons(cart_id, cart_products))
    else:
        await bot.send_message(chat_id, text, reply_markup=generate_cart_buttons(cart_id, cart_products))


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete_cart_product(call: CallbackQuery):
    message = call.message
    _, cart_product_id = call.data.split('_')
    cart_product_id = int(cart_product_id)

    delete_from_database(cart_product_id)

    await bot.answer_callback_query(call.id, text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    await show_cart(message, edit_message=True)

@dp.callback_query_handler(lambda call: 'edit' in call.data)
async def edit_quantity_cart_products(call: CallbackQuery):
    _, cart_product_id, quantity = call.data.split('_')
    cart_product_id, quantity = int(cart_product_id), int(quantity)
    if quantity == 0:
        delete_from_database(cart_product_id)
    else:
        edit_quantity_in_database(cart_product_id, quantity)
    await show_cart(message=call.message, edit_message=True)


@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, cart_id = call.data.split('_')
    cart_id = int(cart_id)
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –æ–±—â—É—é —Å—É–º–º—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    total_products, total_price = get_total_products_price(cart_id)
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å—Ç—Ä–æ—á–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_products = get_cart_products(cart_id)
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print(total_products, total_price)
    print(cart_products)

    text = '–í–∞—à –ó–∞–∫–∞–∑\n\n'
    i = 0
    for product in cart_products:
        i += 1
        text += f'''{i}. {product[2]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[3]}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {product[4]}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products is None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {0 if total_price is None else total_price}'''

    await bot.send_invoice(
        chat_id=chat_id,
        title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
        description=text,
        payload='bot-defined invoice payload',
        provider_token=PAYMENT,
        currency='UZS',
        prices=[
            LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
            LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1500000)
        ]
    )
    await bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!')

executor.start_polling(dp)


"""–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ò —É —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ –°–¢–ê–¢–£–° (–≥–æ—Ç–æ–≤–∏—Ç—Å—è, –µ–¥–µ—Ç, –ø—Ä–∏–Ω—è—Ç)
–ò –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –º–µ–Ω—è—Ç—å—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–æ–º

–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∫—É, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä—è–º–æ –∏–∑ –±–æ—Ç–∞"""












